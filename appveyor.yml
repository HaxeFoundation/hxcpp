version: "{build}"

os: unstable #http://help.appveyor.com/discussions/suggestions/427-pre-install-cygwin

clone_folder: C:\projects\hxcpp

environment:
    global:
        HAXE_ROOT: C:\projects\haxe
        HAXELIB_ROOT: C:\projects\haxelib
        CYG_ARCH: x86
        CYG_ROOT: C:\cygwin
        CYG_SETUP: C:\cygwin\setup-x86.exe
        WODI_ARCH: 32
        MINGW_ARCH: i686

install:
    # Install ocaml using wodi
    - appveyor DownloadFile "http://cygwin.com/setup-%CYG_ARCH%.exe" -FileName "%CYG_ROOT%\setup.exe"
    - '%CYG_ROOT%\setup.exe -q -R "%CYG_ROOT%" -P dos2unix -P diffutils -P cpio -P make -P patch -P mingw64-%MINGW_ARCH%-gcc-core -P mingw64-%MINGW_ARCH%-gcc-g++ > log.txt || type log.txt'
    - '%CYG_ROOT%\bin\bash -lc "cygcheck -dc cygwin" > log.txt || type log.txt'
    - '%CYG_ROOT%\bin\bash -lc "wget -q http://ml.ignorelist.com/wodi/8/wodi%WODI_ARCH%.tar.xz -O /tmp/wodi%WODI_ARCH%.tar.xz"'
    - '%CYG_ROOT%\bin\bash -lc "cd /tmp && rm -rf wodi%WODI_ARCH% && tar -xf wodi%WODI_ARCH%.tar.xz && bash wodi%WODI_ARCH%/install.sh" > log.txt || type log.txt'
    - '%CYG_ROOT%\bin\bash -lc "godi_add godi-zip" > log.txt || type log.txt'
    - 'set PATH=%PATH%;%CYG_ROOT%\opt\wodi%WODI_ARCH%\bin'
    # Install neko. Just download the chocolatey package instead of building from source in order to save time...
    - cinst neko -y
    - RefreshEnv
    - neko -version
    # Install haxe
    - git clone --recursive --depth 1 -q https://github.com/HaxeFoundation/haxe.git %HAXE_ROOT%
    - 'cd %HAXE_ROOT%'
    - 'set PATH=%PATH%;%HAXE_ROOT%'
    - '%CYG_ROOT%\bin\bash -lc "cd \"$OLDPWD\" && make -s -f Makefile.win WODI=wodi%WODI_ARCH% OCAMLOPT=ocamlopt.opt"'
    - '%CYG_ROOT%\bin\bash -lc "cd \"$OLDPWD\" && make -s -f Makefile.win WODI=wodi%WODI_ARCH% OCAMLOPT=ocamlopt.opt tools"'
    - haxe -version
    - cd %APPVEYOR_BUILD_FOLDER%
    - mkdir "%HAXELIB_ROOT%"
    - haxelib setup "%HAXELIB_ROOT%"

build_script:
    - haxelib dev hxcpp %APPVEYOR_BUILD_FOLDER%
    - cd %APPVEYOR_BUILD_FOLDER%\tools\run
    - haxe compile.hxml
    - cd %APPVEYOR_BUILD_FOLDER%\tools\hxcpp
    - haxe compile.hxml
    - cd %APPVEYOR_BUILD_FOLDER%\project
    - neko build.n -verbose

test_script:
    # - cd %APPVEYOR_BUILD_FOLDER%\test\ndlls
    # - haxe compile.hxml && .\cpp\Test
    # - haxe compile64.hxml && .\cpp64\Test
    - cd %APPVEYOR_BUILD_FOLDER%\test\haxe
    - haxe compile.hxml -debug && .\bin\TestMain-debug
    # tests from haxe repo
    - cd %HAXE_ROOT%\tests\unit
    - haxe compile-cpp.hxml -D HXCPP_M32 && .\bin\cpp\Test-debug && rd /s /q bin\cpp
    - haxe compile-cpp.hxml -D HXCPP_M64 && .\bin\cpp\Test-debug
