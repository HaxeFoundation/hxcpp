version: "{build}"

clone_folder: C:\projects\hxcpp

environment:
    global:
        HAXE_ROOT: C:\projects\haxe
        HAXELIB_ROOT: C:\projects\haxelib
        CYG_ARCH: x86
        CYG_ROOT: C:\cygwin
        CYG_SETUP: C:\cygwin\setup-x86.exe
        WODI: wodi32
        ADD_REVISION: 1
        OCAMLOPT: ocamlopt.opt
        MINGW_ROOT_32: C:\tools\mingw32
        MINGW_ROOT_64: C:\tools\mingw64
        MINGW_ARCH: i686
    matrix:
        - HXCPP_ARCH: "32"
        - HXCPP_ARCH: "64"

cache:
  - C:\projects\mingw32.7z
  - C:\projects\mingw64.7z

install:
    - ps: if ($env:HXCPP_ARCH -eq "32") {if (!(Test-Path C:\projects\mingw32.7z)) { Invoke-WebRequest -Uri http://downloads.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/5.2.0/threads-posix/dwarf/i686-5.2.0-release-posix-dwarf-rt_v4-rev0.7z -OutFile C:\projects\mingw32.7z -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::FireFox }}
    - IF [%HXCPP_ARCH%]==[32] 7z x -oC:\tools C:\projects\mingw32.7z > nul
    - ps: if ($env:HXCPP_ARCH -eq "64") {if (!(Test-Path C:\projects\mingw64.7z)) { Invoke-WebRequest -Uri http://downloads.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/5.2.0/threads-posix/seh/x86_64-5.2.0-release-posix-seh-rt_v4-rev0.7z -OutFile C:\projects\mingw64.7z -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::FireFox }}
    - IF [%HXCPP_ARCH%]==[64] 7z x -oC:\tools C:\projects\mingw64.7z > nul
    # Install ocaml using wodi
    - appveyor DownloadFile "http://cygwin.com/setup-%CYG_ARCH%.exe" -FileName "%CYG_ROOT%\setup.exe"
    - '%CYG_ROOT%\setup.exe -g -q -R "%CYG_ROOT%" -P dos2unix -P diffutils -P cpio -P make -P patch -P mingw64-%MINGW_ARCH%-gcc-core -P mingw64-%MINGW_ARCH%-gcc-g++ > log.txt || type log.txt'
    - '%CYG_ROOT%\bin\bash -lc "cygcheck -dc cygwin" > log.txt || type log.txt'
    # The archive is a dropbox hosted version of https://github.com/fdopen/godi-repo/issues/7#issuecomment-98480339
    - '%CYG_ROOT%\bin\bash -lc "wget -q https://dl.dropboxusercontent.com/u/2661116/wodi/%WODI%.tar.xz -O /tmp/%WODI%.tar.xz" > log.txt || type log.txt'
    - '%CYG_ROOT%\bin\bash -lc "cd /tmp && rm -rf %WODI% && tar -xf %WODI%.tar.xz && bash %WODI%/install.sh" > log.txt || type log.txt'
    - '%CYG_ROOT%\bin\bash -lc "godi_add godi-zip" > log.txt || type log.txt'
    - 'set PATH=%PATH%;%CYG_ROOT%\opt\%WODI%\bin'
    # Install neko. Just download the chocolatey package instead of building from source in order to save time...
    - cinst neko -y
    - RefreshEnv
    - neko -version
    # Install haxe
    - git clone --recursive --depth 1 -q https://github.com/HaxeFoundation/haxe.git %HAXE_ROOT%
    - 'cd %HAXE_ROOT%'
    - 'set PATH=%PATH%;%HAXE_ROOT%'
    - '%CYG_ROOT%\bin\bash -lc "cd \"$OLDPWD\" && make -s -f Makefile.win"'
    - '%CYG_ROOT%\bin\bash -lc "cd \"$OLDPWD\" && make -s -f Makefile.win tools"'
    - haxe -version
    - cd %APPVEYOR_BUILD_FOLDER%
    - mkdir "%HAXELIB_ROOT%"
    - haxelib setup "%HAXELIB_ROOT%"

build_script:
    - haxelib dev hxcpp %APPVEYOR_BUILD_FOLDER%
    - cd %APPVEYOR_BUILD_FOLDER%\tools\run
    - haxe compile.hxml
    - cd %APPVEYOR_BUILD_FOLDER%\tools\hxcpp
    - haxe compile.hxml
    - cd %APPVEYOR_BUILD_FOLDER%\project
    - neko build.n windows-m%HXCPP_ARCH% -verbose

test_script:
    - cd %APPVEYOR_BUILD_FOLDER%\test\ndlls
    - haxe compile%HXCPP_ARCH%.hxml && .\cpp%HXCPP_ARCH%\Test
    - cd %APPVEYOR_BUILD_FOLDER%\test\haxe
    - haxe compile.hxml -debug -D HXCPP_M%HXCPP_ARCH% && .\bin\TestMain-debug
    # tests from haxe repo
    - cd %HAXE_ROOT%\tests\unit
    - haxe compile-cpp.hxml -D HXCPP_M%HXCPP_ARCH% && .\bin\cpp\Test-debug
    # tests from mingw
    - cd %APPVEYOR_BUILD_FOLDER%\test\haxe
    - haxe compile.hxml -debug -D HXCPP_M%HXCPP_ARCH% -D mingw -D no_shared_libs && .\bin\TestMain-debug
    - cd %HAXE_ROOT%\tests\unit
    - haxe compile-cpp.hxml -D HXCPP_M%HXCPP_ARCH% -D mingw -D no_shared_libs && .\bin\cpp\Test-debug
