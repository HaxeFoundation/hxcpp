/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// This file is automatically generated by a tool in HXCPP repo.
// see <hxcpp_repo>/tools/uvgenerator

// Contents of <hxcpp_repo>/tools/uvgenerator/UV.hx.header :

package cpp.uv;

extern enum abstract UvLoopOption(Int) {
	@:native('UV_LOOP_BLOCK_SIGNAL') var UV_LOOP_BLOCK_SIGNAL;
	@:native('UV_METRICS_IDLE_TIME') var UV_METRICS_IDLE_TIME;
}

extern enum abstract UvSigNum(Int) from Int to Int {
	@:native('SIGABRT') var SIGABRT;
	@:native('SIGFPE') var SIGFPE;
	@:native('SIGHUP') var SIGHUP;
	@:native('SIGILL') var SIGILL;
	@:native('SIGINT') var SIGINT;
	@:native('SIGKILL') var SIGKILL;
	@:native('SIGSEGV') var SIGSEGV;
	@:native('SIGTERM') var SIGTERM;
	@:native('SIGWINCH') var SIGWINCH;
}

typedef UvPidT = Int;

/**
	Automatically generated bindings for libuv.

	@see http://docs.libuv.org/en/v1.x/api.html

	Avoid using this module directly.
	BACKWARD COMPATIBILITY OF THIS MODULE IS NOT MAINTAINED.
**/
@:buildXml('<include name="${HXCPP}/src/hx/libs/libuv/Build.xml"/>')
extern class UV {

	extern static public inline function resolve(result:Int):Int {
		if(result < 0)
			throw new UVException(UVError.ofNative(result));
		return result;
	}

	extern static public inline function throwErr(result:Int):Int {
		throw new UVException(UVError.ofNative(result));
	}

// Auto generated content :

