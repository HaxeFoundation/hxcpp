/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// This file is automatically generated by a tool in HXCPP repo.
// see <hxcpp_repo>/tools/uvgenerator

// Contents of <hxcpp_repo>/tools/uvgenerator/UV.hx.header :

package cpp.uv;

@:coreType
@:native("uv_loop_option")
extern enum abstract UvLoopOption from Int {
	@:native("UV_LOOP_BLOCK_SIGNAL") var UV_LOOP_BLOCK_SIGNAL;
	@:native("UV_METRICS_IDLE_TIME") var UV_METRICS_IDLE_TIME;
}

extern enum abstract NativeSigNum(Int) from Int to Int {
	@:native("SIGABRT") var SIGABRT;
	@:native("SIGFPE") var SIGFPE;
	@:native("SIGHUP") var SIGHUP;
	@:native("SIGILL") var SIGILL;
	@:native("SIGINT") var SIGINT;
	@:native("SIGKILL") var SIGKILL;
	@:native("SIGSEGV") var SIGSEGV;
	@:native("SIGTERM") var SIGTERM;
	@:native("SIGWINCH") var SIGWINCH;
}

extern enum abstract AfAddressFamily(Int) from Int to Int {
	@:native("AF_UNSPEC") var AF_UNSPEC;
	@:native("AF_INET") var AF_INET;
	@:native("AF_INET6") var AF_INET6;
}

extern enum abstract PfAddressFamily(Int) from Int to Int {
	@:native("PF_UNSPEC") var PF_UNSPEC;
	@:native("PF_INET") var PF_INET;
	@:native("PF_INET6") var PF_INET6;
}

typedef UvPidT = Int;
typedef UvUidT = Int;
typedef UvGidT = Int;

@:native("uv_buf_t")
@:structAccess extern class UvBufT {
	var base:RawPointer<Char>;
	var len:SizeT;
	@:native("new uv_buf_t") public static function create():RawPointer<UvBufT>;
}

@:native("uv_os_sock_t")
@:scalar @:coreType @:notNull
extern abstract UvOsSockT from Int to Int {}

@:coreType
@:native("uv_tcp_flags")
extern enum abstract UvTcpFlags to Int {
	@:native("UV_TCP_IPV6ONLY") var UV_TCP_IPV6ONLY;
}

@:native("sockaddr_storage")
@:structAccess extern class SockaddrStorage {
	var ss_family:AfAddressFamily;
	@:native("new sockaddr_storage") public static function create():RawPointer<SockaddrStorage>;
}

@:native("sockaddr_in6")
@:structAccess extern class SockaddrIn6 {
	var sin6_port:UInt16;
	@:native("new sockaddr_in6") public static function create():RawPointer<SockaddrIn6>;
}

@:native("sockaddr_in")
@:structAccess extern class SockaddrIn {
	var sin_port:UInt16;
	@:native("new sockaddr_in") public static function create():RawPointer<SockaddrIn>;
}

@:native("sockaddr")
@:structAccess extern class Sockaddr {
	@:native("new sockaddr") public static function create():RawPointer<Sockaddr>;
}

abstract UvFile(Int) to Int {
	@:allow(cpp.uv) inline function new(fd:Int)
		this = fd;
}

typedef UvFsCb = Callable<(RawPointer<UvFsT>)->Void>;

extern enum abstract UvFsOpenFlag(Int) to Int {
	@:native("UV_FS_O_APPEND") var UV_FS_O_APPEND;
	@:native("UV_FS_O_CREAT") var UV_FS_O_CREAT;
	@:native("UV_FS_O_DIRECT") var UV_FS_O_DIRECT;
	@:native("UV_FS_O_DIRECTORY") var UV_FS_O_DIRECTORY;
	@:native("UV_FS_O_DSYNC") var UV_FS_O_DSYNC;
	@:native("UV_FS_O_EXCL") var UV_FS_O_EXCL;
	@:native("UV_FS_O_EXLOCK") var UV_FS_O_EXLOCK;
	@:native("UV_FS_O_FILEMAP") var UV_FS_O_FILEMAP;
	@:native("UV_FS_O_NOATIME") var UV_FS_O_NOATIME;
	@:native("UV_FS_O_NOCTTY") var UV_FS_O_NOCTTY;
	@:native("UV_FS_O_NOFOLLOW") var UV_FS_O_NOFOLLOW;
	@:native("UV_FS_O_NONBLOCK") var UV_FS_O_NONBLOCK;
	@:native("UV_FS_O_RANDOM") var UV_FS_O_RANDOM;
	@:native("UV_FS_O_RDONLY") var UV_FS_O_RDONLY;
	@:native("UV_FS_O_RDWR") var UV_FS_O_RDWR;
	@:native("UV_FS_O_SEQUENTIAL") var UV_FS_O_SEQUENTIAL;
	@:native("UV_FS_O_SHORT_LIVED") var UV_FS_O_SHORT_LIVED;
	@:native("UV_FS_O_SYMLINK") var UV_FS_O_SYMLINK;
	@:native("UV_FS_O_SYNC") var UV_FS_O_SYNC;
	@:native("UV_FS_O_TEMPORARY") var UV_FS_O_TEMPORARY;
	@:native("UV_FS_O_TRUNC") var UV_FS_O_TRUNC;
	@:native("UV_FS_O_WRONLY") var UV_FS_O_WRONLY;
}

enum abstract NativeFileAccessMode(Int) to Int {
	@:native("F_OK") var F_OK;
	@:native("X_OK") var X_OK;
	@:native("W_OK") var W_OK;
	@:native("R_OK") var R_OK;
}

/**
	Automatically generated bindings for libuv.

	@see http://docs.libuv.org/en/v1.x/api.html

	Avoid using this module directly.
	BACKWARD COMPATIBILITY OF THIS MODULE IS NOT MAINTAINED.
**/
@:buildXml('<include name="${HXCPP}/src/hx/libs/libuv/Build.xml"/>')
extern class UV {

	extern static public inline function resolve(result:Int):Int {
		if(result < 0)
			throw new UVException(UVError.ofNative(result));
		return result;
	}

	extern static public inline function throwErr(result:Int):Int {
		throw new UVException(UVError.ofNative(result));
	}

	extern static public inline function explain(result:Int):UVError {
		return result < 0 ? UVError.ofNative(result) : UV_NOERR;
	}

	extern static public inline function toChars(array:Array<String>):RawPointer<RawPointer<Char>> {
		var chars:Pointer<CastCharStar> = Stdlib.malloc((array.length + 1) * untyped __cpp__("sizeof(char *)"));
		chars.setAt(array.length, null);
		for(i => item in array)
			chars.setAt(i, item);
		return chars.raw;
	}

	extern static public inline function getName(fn:(buf:RawPointer<Char>, size:RawPointer<SizeT>)->Int):String {
		var size:SizeT = 256;
		var buf:Pointer<Char> = null;
		var eNoBufs = UVError.UV_ENOBUFS.toNative();
		var result = eNoBufs;
		while (result == eNoBufs) {
			if(buf != null)
				Stdlib.free(buf);
			buf = Stdlib.malloc(size);
			result = fn(buf.raw, RawPointer.addressOf(size));
		}
		if(result < 0) {
			if(buf != null)
				Stdlib.free(buf);
			throwErr(result);
		}
		return new String(untyped buf.raw); // TODO: is this a correct way to create String from RawPointer<Char>
	}

	extern static public inline function toBuf(bytes:haxe.io.Bytes, pos:Int, length:Int):RawPointer<UvBufT> {
		if(pos + length > bytes.length)
			throw new UVException(UV_ENOBUFS);
		var buf = UvBufT.create();
		var ptr = Pointer.fromRaw(buf);
		var base = NativeArray.getBase(bytes.getData()).getBase();
		ptr.value.base = Pointer.addressOf(Pointer.fromRaw(base).at(pos)).raw;
		ptr.value.len = length;
		return buf;
	}

// Auto generated content :

